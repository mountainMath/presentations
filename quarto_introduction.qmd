---
title: "Introduction to quarto notebooks"
subtitle: VPL Main Branch
author: 
  - name: "Jens von Bergmann"
    affiliations: MountainMath Software and Analytics
editor: visual
date: "2023-06-21T00:30:00Z"
date-format: "MMM D, YYYY - h:mma"
format: 
  revealjs-clean:
    css: my_quarto_css.css
execute: 
  echo: true
---

## What is a notebook?

::: callout-note
A notebook is a document that combines text, code and output generated by the code.
:::

Commonly used notebook formats include

-   Mathematica

-   Jupyter

-   Google Colab

-   Observable

-   Rmarkdown

-   [quarto](https://quarto.org)

We will look at quarto, which currently supports Python, R, Julia and Observable code. It supports compilation to PDF, html, MS Word, ePub, Markdown, Presentations, and more.

## Quarto

Quarto notebooks are meant to be language agnostic, right now **R**, **Python**, **Julia** and **ObservableJS** are well-supported. Allows for mixing of languages in the same document.

To create a new quarto notebook in **RStudio** select *Quarto Document* from the file creation dropdown.

::: {layout="[[1,1,1]]"}

![Create new quarto notebook](images/create_quarto_notebook.png)

![Set author and title](images/create_quarto_notebook2.png)

![Notebook with initial template text](images/create_quarto_notebook3.png)

:::

## The Notebook format

* Markdown syntax, Visual Editor can make it easier to get started.
* Insert code blocks as needed, output will get rendered into html or PDF document
* Set [execution options](https://quarto.org/docs/computations/execution-options.html) to control what gets shown in html or PDF

```
#| echo: true       # include code in output
#| output: true     # inlcude output of code
#| warning: true    # show warning messages
```

## Example {.large-font}

:::{.pull-left}
The [`cansim` R package](https://mountainmath.github.io/cansim/) interfaces with the StatCan NDM that replaces the former CANSIM tables. It can be queried for
- whole tables
- specific vectors
- data discovery searching through tables

It encodes the metadata and allows to work with the internal hierarchical structure of the fields.
```{r}
#install.packages("tidyverse")
library(tidyverse)
#install.packages("cansim")
library(cansim)
```
:::

:::{.pull-right}
<img src="https://raw.githubusercontent.com/mountainMath/cansim/master/images/cansim-sticker.png" alt="cansim" style="height:500px;margin-top:-80px;">
:::

## First example: Motor vehicle sales
To start off we grab data on motor vehicle sales from table 20-10-0001 and inspect the available variables.

```{r}
mv_sales <- get_cansim("20-10-0001")

mv_sales %>% select_if(is.factor) %>% lapply(levels)
```

## Motor vehicle sales (Notes) {.medium-code .large-font}
It's always good to check the notes so there are no unexpected hiccups.

```{r}
get_cansim_table_notes("20-10-0001") %>%
  knitr::kable()
```



We take note of the definition for **Trucks** and that **seasonally adjusted** data has been discontinued.

## Motor vehicle sales {.medium-code}
```{r fig.height=3, fig.width=8}
plot_data <- mv_sales %>% 
  filter(GEO=="Canada",
         Date>=as.Date("1990-01-01"),
         `Vehicle type`!="Total, new motor vehicles",
         `Origin of manufacture`=="Total, country of manufacture",
         Sales=="Units",
         `Seasonal adjustment`=="Unadjusted")

ggplot(plot_data,aes(x=Date,y=VALUE,color=`Vehicle type`)) +
  geom_line() 
```

## Motor vehicle sales (nicer graph)  {.medium-code}
```{r fig.height=3, fig.width=8}
g <- ggplot(plot_data, aes(x=Date,y=VALUE,color=`Vehicle type`)) +
  theme_light() +
  geom_line(alpha=0.2) + 
  geom_smooth(span=0.1) + 
  scale_y_continuous(labels=function(d)scales::comma(d,scale=1/1000,suffix="k")) +
  labs(title="Canadian new motor vehicle sales",x=NULL,y="Sales per month",
       caption="StatCan Table 20-10-0001")
g
```


## Motor vehicle sales (annotated graph, final version) {.medium-code}
```{r fig.height=4, fig.width=8}
library(ggrepel)   # (for nicer labels)
g + geom_text_repel(data=~filter(.,Date==as.Date("1990-08-01"),`Vehicle type`=="Passenger cars"),
                   label="Passenger cars",hjust=0,nudge_y = 30000) +
  geom_text_repel(data=~filter(.,Date==as.Date("2016-11-01"),`Vehicle type`=="Trucks"),
                   label="Trucks, SUVs, Vans, Buses",
                  hjust=1,nudge_x = -2000,nudge_y=10000) +
  scale_color_manual(values=c("Passenger cars"="steelblue","Trucks"="brown"),guide='none')
```


## Motor vehicle sales (seasonality) {.medium-code}
```{r fig.height=4, fig.width=8}
plot_data %>% rename(type=`Vehicle type`) %>%
  ggseas::ggsdc(aes(x=Date,y=VALUE,color=type),method="stl",frequency = 12,s.window = 24) +
  theme_light() + geom_line() + 
  scale_color_manual(values=c("Passenger cars"="steelblue","Trucks"="brown"),guide='none') +     
  scale_y_continuous(labels=function(d)scales::comma(d,scale=1/1000,suffix="k")) +
  labs(title="Canadian new motor vehicle sales (STL decomposition)",x=NULL,y="Sales per month",
       colour = "Vehicle type",caption="StatCan Table 20-10-0001")
```




